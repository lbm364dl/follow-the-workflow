## Solving conflicts

As noted in the previous section, sometimes when you `git pull` from another
branch or from the same remote one (if you are missing some changes), you can
find conflicts. A conflict looks like this:

```
<<<<<<< HEAD
this is my content
that I just added
=======
this is some different conflicting content
from the branch I pulled from
>>>>>>> some_branch_name
```

So in a conflict, there are at least three lines the were added by git to
separate the conflicting parts. The conflict starts at the line `<<<<<<< HEAD`,
and until we get to the `=======` line, the lines in between are the content
_we_ added. Then from this one until the end `>>>>>>> some_branch_name`, the
lines in between are the content that _someone else_ added and we did not
have yet. Then solving a conflict essentially means removing these three lines
added by git. We have three options here. You will have to decide which one
you want depending on the situation:

- Keep only our content. Solving the conflict would involve removing all lines
  except:
  ```
  this is my content
  that I just added
  ```
- Keep only the other content. We remove everything except:
  ```
  this is some different conflicting content
  from the branch I pulled from
  ```
- Keep some (or all) content from both parts, or even adapt it adding other
  things. We remove the three lines added by git and everything else we do
  not want to keep, leaving something like a mix:
  ```
  this is my content
  that I just added
  this is some different conflicting content
  ```

If you have to find conflicts (I advise to do it manually), you could use
some text finding tool in your editor, and look for the text `HEAD`, as this
always appears in the first line of a conflict. After you solved all
conflicts, you have to do the rest of the steps explained in previous
sections, involving `git add` and `git commit`, because a pull also counts
as a code change, so you have to make a commit from it. In case you are
wondering, when you perform a pull without conflicts, you are not creating
a commit yourself but git does it for you, automatically. So whether you
solved the conflicts or git did it for you, there will always be a commit
representing it.
