{
  "hash": "92743ca769b1e41a719b98a6b2aaf8b9",
  "result": {
    "engine": "knitr",
    "markdown": "## Creating a pull request\n\nSuppose you are done with your changes and you want to add these to the main\nbranch. Mixing one branch with another is known as 'merging'. In this case we would\nlike to merge our new branch with the main branch. This can be done forcefully, but\nthe common practice we will be following is to create what is known as a 'Pull\nrequest' from our branch into the main one, and we do this directly from GitHub,\nonce we have pushed all of our changes.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/new_pull_request.png){fig-alt='Click \\'New pull request\\' in GitHub'}\n:::\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/create_pull_request.png){fig-alt='Click \\'Create pull request\\''}\n:::\n:::\n\n\nHere you can see all the changes you made (that differ from the main branch) before\nclicking again 'Create pull request'. Then you will see the following, where you\nshould add some title and description to explain what you have done. You finally\nclick 'Create pull request' again.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/add_pr_title_description.png){fig-alt='Add title and description and click \\'Create pull request\\''}\n:::\n:::\n\n\nNow the Pull Request (often abbreviated as PR) is created and the next step is to\nask for someone's review.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/add_people_review_pr.png){fig-alt='Adding people to review your PR'}\n:::\n:::\n\n\nIdeally these changes would not be merged until someone else reviews your code.\nThis person might find things you have to change and request these changes before\nmerging, so you would have to keep working on your branch until they are satisfied.\nThen they would accept your changes and you would be ready to merge your branch\ninto the main one, and the process would be done.\n\nHowever, sometimes there is\nan additional step that must be passed before merging, which is related to\nautomatic code checks, e.g. check whether your code is well formatted and\nwhether it passes all tests successfully. If configured, these can run\nautomatically when creating a Pull Request. We will indeed work with them, but we\nwill explain these automatic checks better in the\n[Automatic checks on Pull Requests section](#automatic-checks-on-pull-requests).\n\nWhile working on your own branch, others may have merged their own branches\ninto the main branch and then your own branch would be outdated. When creating\na Pull Request yourself, you should make sure your branch is also up to date with\neverything already on the main branch. Recall from\n[the pulling remote changes section](#pulling-remote-changes) that we can do this\nwith the command\n```\ngit pull origin main\n```\nEven if you are locally on your own branch and directly try to fetch changes from\na different remote one (in this case `main`), this works as expected, that is,\nit tries to merge all new changes from the `main` branch into your own local one.\nThis automatic merge works most of the times, but sometimes you may find conflicts,\nbecause the program does not know how to combine everything neatly. If this happens,\nyou must manually check which parts of the code should be kept. In the next section\nwe explain how to solve conflicts.\n",
    "supporting": [
      "create-pr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}