{
  "hash": "a8bf0e87c2b381ec50ed713dc855c657",
  "result": {
    "engine": "knitr",
    "markdown": "## Function documentation\n\nThe special commented section seen in the previous example will be used by a\npackage called [`roxygen2`](https://roxygen2.r-lib.org/). We have to follow\nthis exact syntax, so that this package can automatically build a really neat\ndocumentation of our package for us. Let's try to understand its basic\nstructure. For reference, these were the different parts:\n\n- A small description of the function, nothing else.\n```\n#' Create a new dataframe where each row has a year range into one where each\n#' row is a single year, effectively 'expanding' the whole year range\n```\n\n- A small description of each parameter the function receives. It should be like:\n```\n#' @param param_name_1 Description of param 1\n#' @param param_name_2 Description of param 2\n#' ...\n```\nAs you see here I think it is OK to add line breaks in between, as long as each\nparameter starts with `@param`.\n```\n#' @param trade_sources A tibble dataframe\n#' where each row contains the year range\n```\n- A small description of the value the function returns. It should start with\n`@returns`.\n```r\n#' @returns A tibble dataframe where each row\n#' corresponds to a single year for a given source\n```\n- A simple line containing `@export` to indicate the function can be used in\nthe package, i.e., it is public.\n```r\n#' @export\n```\n\n- A 'code' section of examples to illustrate the function's behavior.\nIt must start with `@examples`, and after that you can write usual R code.\nWhen this is processed, it automatically runs the code and adds some lines\nwith its output in the documentation.\n```r\n#' @examples\n#' trade_sources <- tibble::tibble(\n#'   Name = c(\"a\", \"b\", \"c\"),\n#'   Trade = c(\"t1\", \"t2\", \"t3\"),\n#'   Info_Format = c(\"year\", \"partial_series\", \"year\"),\n#'   Timeline_Start = c(1, 1, 2),\n#'   Timeline_End = c(3, 4, 5),\n#'   Timeline_Freq = c(1, 1, 2),\n#'   `Imp/Exp` = \"Imp\",\n#'   SACO_link = NA,\n#' )\n#' expand_trade_sources(trade_sources)\n```\n\nThese options are enough to get us started with a nice documentation. In the\n[Writing articles](#writing-articles) section we will learn how to generate\nand see this documentation. In this example, it would look something like this\n(note the autogenerated example code output):\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/roxygen_documentation.png){fig-alt='Auto generated documentation appearance'}\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}