{
  "hash": "46a119a0bc65d7dc311d3f195b0b5602",
  "result": {
    "engine": "knitr",
    "markdown": "## Virtual environments with renv\n\nWe just mentioned we were going to use the R package structure, and it seems\nR package developers do not use `renv`... Or do they? At least they do not seem\nto include `renv` related files in their package repositories... Well, why\nshould _we_ use it then? While writing this guide I was a bit confused myself\nabout mixing both things, but my conclusion was that it just does not hurt\nin any way, `renv` just makes things easier without apparent drawbacks\n(do tell me if you know of any). When creating packages, you want to make sure\nthey work on fresh installations, i.e., computers that do not have anything\nunnecessary installed. The package creation process as we will use it, does\nnot need to know anything about `renv`, so we should be fine. The packages use\ntheir own file called `DESCRIPTION` which includes information about the\nother packages it needs as dependencies, as we will see later on. So we can\njust try to benefit from using virtual environments.\n\nOK, but what are virtual environments? This is a fancy term, but its practical\nmeaning is quite simple. First consider the following:\n\n- If you are not using them, it means you just have a global R installation\nin your computer, and whenever you install a package, it is installed globally.\n- If you want to run someone's code and they use a bunch of packages\nthat you usually do not, you would have to install all of them to be able\nto run their code, and these would mix with all your other packages. If\nyou want to uninstall them after that, you would have to do a lot of manual\nwork to make sure you know all of them (some package dependencies could have\nalso been installed, and you cannot be sure if they were only used for these\npackages or also some other package that you already had).\n- If you want to write some code that uses some packages, and you want\nanother person to run it, you should make a list of the packages used only\nin this project, because they should not have to install any other packages\nyou have from other projects but are not necessary here. If you do not\neven make this 'package list', the other person should have to go through\nyour whole code or run it and install a new package every time the code\nfails because of a missing one. Overall, this is a poor experience.\n\nVirtual environments try to fix this. Essentially, they provide a 'local'\ninstallation of packages, that are only visible inside your project, and\ndo not get mixed at all with those from your global R installation or from\nother individual projects. In practice, a virtual environment is just a\nfolder containing installed packages, isolated from the folder that\ncontains your global R installation. It is like having several different\nR installations, each one with their own packages and versions.\n\nChances are you follow this guide with an existing repository that is\nalready using `renv` (then you can skip the `renv::init()` step). If this\nwere not the case, open an R prompt in the root directory of your project\nand run inside the prompt:\n```\nrenv::init()\n```\nIt will probably ask to close and reopen a clean prompt. After that, every\ntime we open an R prompt inside our project, it will automatically use `renv`\nto work within a virtual environment. If you use `renv` for the first time\nbut on a project that already uses it, when you open the R prompt in its\nroot directory, the `renv` package will be installed automatically.\n\nNow that we have `renv`, we can, for example, install a testing package\nwith `install.packages(\"testthat\")` and this will not be a global\ninstallation, which means it will only work inside this project. This is\na way of isolating your project dependencies and making your projects\nreproducible, by letting others know exactly which packages your code\nneeds to run, and not add unnecessary ones that you may have because\nof other projects, as we mentioned previously.\n\nThe 'list' of required packages for the project, along with their versions,\nwhich is used by `renv` to manage the virtual environment, is in a file\ncalled `renv.lock`. After installing new packages, this file is not updated\nautomatically and we have to do it manually by running\n```\nrenv::snapshot()\n```\nThis will update the `renv.lock` file with all the packages `renv` finds\nare used in your code. If for some reason you need to install a package not\nexplicitly used in the code, this may fail to recognize it. In that case, you\nshould instead explicitly call `renv::snapshot(type=\"all\")` to force every\npackage in your `renv` environment to be added to `renv.lock`. You should push\nthis file to the repository. If someone else wants to reproduce your code, then\nthey may have to run\n```\nrenv::restore()\n```\nwhich will install any packages from `renv.lock` that they may still not\nhave installed, but again, only on a project level, not conflicting with\ntheir global R installation. If you use GitHub with others, then you might\nalso need to do this every time you pull remote changes and someone else\nhas included a new package, so that you are then up to date with them.\nIn any case, when opening the R shell, it will probably remind you that there\nare missing packages in your virtual environment with a message:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/renv_warn_packages_not_installed.png){fig-alt='renv warns packages not installed'}\n:::\n:::\n\n\nAnd this is basically all you need to start using a virtual environment,\nkeeping in mind the commands\n\n- `renv::snapshot()`: add new required packages to `renv.lock` file\n- `renv::restore()`: install packages from `renv.lock` that you do not have yet\n\nI wrote this introduction to `renv` by reading their own package documentation.\nIf you want to learn more about it, you can read it yourself at\n[their package website](https://rstudio.github.io/renv/articles/renv.html).\n\nWhile this is not directly related to `renv` usage, I wanted to highlight\nhere that in Windows you may have errors trying to install some R packages.\nMost of the times this may be related to missing operating system dependencies\nor commands. In Windows this should be easily fixable by installing the version\nof [Rtools](https://cran.r-project.org/bin/windows/Rtools/) that matches with\nyour R version. After selecting the version you can download it by clicking\nthe first installer link. After installing Rtools, you can try again to\ninstall the R packages you wanted.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}